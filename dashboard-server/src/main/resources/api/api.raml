#%RAML 1.0
---
title: Football Stats Dashboard
version: v1
baseUri: https://localhost:8090/football-stats-dashboard/{version}
mediaType: application/json

securitySchemes:
  access_token:
    description: Each request must include the api key in the headers
    type: x-customApiKey
    describedBy:
      headers:
        Authorization:
          description: |
            Used to send a valid auth access token.
          type: string
          example: BEARER 6bc7106b-e109-48e4-b385-a574b09ce821
      responses:
        401:
          description: |
            Bad or expired access token. This can happen if the backend revoked or expired the access token.
            To fix this, you should re-authenticate the user.
          body:
            application/json:
              example: !include examples/response-401.json
        403:
          description: |
            Bad auth request (bad nonce, expired timestamp, not enough privileges, etc). Unfortunately,
            re-authenticating the user won't help here.
          body:
            application/json:
              example: !include examples/response-403.json

/players:
  /{playerId}:
    uriParameters:
      playerId:
        description: The player ID
        type: string
        required: true
    get:
      description: gets a player's data by id
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/player-response.json
    put:
      description: updates a player's data
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/player-response.json
        500:
          description: failed during player data update
    delete:
      description: delete a player's data
      securedBy: [access_token]
      responses:
        204:
          description: successfully delete a player's data

  post:
    description: adds a new player's data
    securedBy: [access_token]
    body:
      application/json:
        example: !include examples/player-post-request.json
    responses:
      201:
        description: player's data created
        body:
          application/json:
            example: !include examples/player-response.json
      422:
        description: unprocessable entity when player roles or attributes are missing

/users:
  /{userId}:
    uriParameters:
      userId:
        description: The user ID
        type: string
        required: true
    get:
      description: gets a user's data by id
      responses:
        200:
          body:
            application/json:
              example: !include examples/user-response.json
  post:
    description: adds a new user's data
    body:
      application/json:
        example: !include examples/user-post-request.json
    responses:
      201:
        description: user's data created
        body:
          application/json:
            example: !include examples/user-response.json
      409:
        description: conflict because existing user with the same first name, last name and email combination
  /authenticate:
    post:
      description: authenticates a user's credentials and generates/retrieves access_token for subsequent operations
      body:
        application/json:
          example: !include examples/user-auth-request.json
      responses:
        200:
          description: access_token generated/retrieved
          body:
            application/json:
              example: !include examples/access-token-response.json
        400:
          description: bad request when either email or password does not match

/club:
  /{clubId}:
    uriParameters:
      clubId:
        description: The club ID
        type: string
        required: true
    get:
      description: gets a club's data by id
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/club-response.json
    put:
      description: updates a club's data
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/club-response.json
        500:
          description: failed during club data update
    delete:
      description: delete a club's data
      securedBy: [access_token]
      responses:
        204:
          description: successfully delete a club's data
    /squadPlayers:
      get:
        description: gets list of all players in the corresponding club
        securedBy: [access_token]
        responses:
          200:
            body:
              application/json:
                example: !include examples/squad-players-response.json
  post:
    description: adds a new club's data
    securedBy: [access_token]
    body:
      application/json:
        example: !include examples/club-post-request.json
    responses:
      201:
        description: club's data created
        body:
          application/json:
            example: !include examples/club-response.json

/match-performance:
  /{matchPerformanceId}:
    uriParameters:
      matchPerformanceId:
        description: The identifier for the match performance corresponding to a player and a competition
        type: string
        required: true
    get:
      description: gets a player's performance data in a given competition on the basis of the performance ID
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/match-performance-response.json
    put:
      description: updates a player's performance data in a given competition on the basis of the performance ID
      securedBy: [access_token]
      responses:
        200:
          body:
            application/json:
              example: !include examples/match-performance-response.json
        500:
          description: failed during player performance data update
    delete:
      description: delete a player's performance data in a given competition on the basis of the performance ID
      securedBy: [access_token]
      responses:
        204:
          description: successfully delete a player's performance data
  post:
    description: add new match performance data for a given player in a give competition
    securedBy: [access_token]
    body:
      application/json:
        example: !include examples/match-performance-post-request.json
    responses:
      201:
        description: player's match performance data created
        body:
          application/json:
            example: !include examples/match-performance-response.json
      422:
        description: unprocessable entity when playerID or competitionID is missing
  /lookup/{playerId}:
    uriParameters:
      playerId:
        description: The player ID
        type: string
        required: true
    get:
      description: gets a player's performance data based on their ID and the competitionID
      securedBy: [access_token]
      queryParameters:
        competitionId:
          displayName: Competition ID
          type: string
          required: false
          description: The competition identifier
      responses:
        200:
          body:
            application/json:
              example: !include examples/match-performance-response.json